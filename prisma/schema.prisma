generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  role          String?   @default("user")
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  cart          Cart? // Relación con el carrito
  orders        Order[] // Relación con órdenes

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// schema.prisma
model Producto {
  id                 String                    @id @default(uuid())
  nombre             String
  descripcion        String?
  precio             Float // o Decimal, según tu base de datos
  precioPromo        Float
  precioDosificacion Float?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  categoriaId        String
  categoria          Categoria                 @relation(fields: [categoriaId], references: [id])
  imagenPrincipal    String?
  variaciones        VariacionProducto[]
  imagenes           ImagenVariacionProducto[]
}

model Categoria {
  id          String     @id @default(uuid())
  nombre      String
  descripcion String?
  img         String?
  productos   Producto[]
}

model ImagenVariacionProducto {
  id          String             @id @default(uuid())
  variacionId String?
  url         String
  tipo        String? // Puedes usar 'principal', 'secundaria', etc.
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  variacion   VariacionProducto? @relation(fields: [variacionId], references: [id])
  Producto    Producto?          @relation(fields: [productoId], references: [id])
  productoId  String?
}

model VariacionProducto {
  id         String                    @id @default(uuid())
  productoId String
  producto   Producto                  @relation(fields: [productoId], references: [id], onDelete: Cascade)
  stock      Int
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt
  atributos  VariacionAtributo[]
  imagenes   ImagenVariacionProducto[]
  cartItems  CartItem[] // Relación con items en carritos
  orderItems OrderItem[] // Relación con items en órdenes
}

model VariacionAtributo {
  id                  String             @id @default(uuid())
  opcionAtributoId    String
  valorAtributo       OpcionAtributo     @relation(fields: [opcionAtributoId], references: [id])
  VariacionProducto   VariacionProducto? @relation(fields: [variacionProductoId], references: [id], onDelete: Cascade)
  variacionProductoId String?

  @@unique([variacionProductoId, opcionAtributoId])
}

model AtributoVariacion {
  id             String           @id @default(uuid())
  nombre         String // Nombre del atributo (Ej. 'Color', 'Talla', etc.)
  descripcion    String?
  OpcionAtributo OpcionAtributo[]
}

model OpcionAtributo {
  id                String              @id @default(uuid())
  atributoId        String
  valor             String // Valor de la opción (Ej. 'Rojo', 'M', 'Algodón', etc.)
  atributo          AtributoVariacion   @relation(fields: [atributoId], references: [id], onDelete: Cascade)
  VariacionAtributo VariacionAtributo[]
}

// Nuevos modelos para el carrito y órdenes
model Cart {
  id        String     @id @default(uuid())
  userId    String?    @unique
  sessionId String?    @unique // Field to track anonymous carts
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id             String            @id @default(uuid())
  cartId         String?
  cart           Cart?             @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variacionId    String
  variacion      VariacionProducto @relation(fields: [variacionId], references: [id], onDelete: Cascade)
  cantidad       Int
  precioUnitario Float
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@unique([cartId, variacionId])
}

model Order {
  id               String      @id @default(uuid())
  userId           String? // Make userId optional
  user             User?       @relation(fields: [userId], references: [id], onDelete: Cascade) // Make the relation optional
  items            OrderItem[]
  estado           String      @default("pendiente") // Ej. 'pendiente', 'enviado', 'entregado', etc.
  direccionEnvio   String?
  nombre           String // Nombre del cliente
  apellidos        String // Apellidos del cliente
  departamento     String // Departamento del cliente
  ciudad           String // Ciudad del cliente
  nombreBarrio     String?
  montoTotal       Float
  telefonoContacto String
  fechaCompra      DateTime    @default(now())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model OrderItem {
  id          String            @id @default(uuid())
  orderId     String
  order       Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variacionId String
  variacion   VariacionProducto @relation(fields: [variacionId], references: [id], onDelete: Cascade)
  cantidad    Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}
